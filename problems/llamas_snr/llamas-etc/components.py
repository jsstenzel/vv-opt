#components.py
import random
import argparse

dichroic_sl_table = [
   "ECI_FusedSilica.txt ECI model",
   "Dichroic_SL/Actual_transmission(Witness_sample_coating_lot_A).txt ECI2 asbuilt",
   "Dichroic_SL/Actual_transmission(Witness_sample_coating_lot_B).txt ECI2 asbuilt",
   "Dichroic_SL/Actual_reflection(Witness_sample_coating_lot_A).txt ECI2 asbuilt",
   "Dichroic_SL/Actual_reflection(Witness_sample_coating_lot_B).txt ECI2 asbuilt"
]

dichroic_bg_table = [
   "ECI_FusedSilica.txt ECI model",
   "Dichroic_BG/witness_sample_LLAMAS_dichroic_BG.txt ECI2 asbuilt",
   "Dichroic_BG/witness_sample_LLAMAS_dichroic_BG_reflect.txt ECI2 asbuilt"
]

collimator_table = [
    "dielectric_mirror.txt ECI2 model"
]

vph_blue_table = [  
   "VPHG/In-house_testing/6414B-01-02.txt", \
   "VPHG/In-house_testing/6414B-03-03_QC.txt", \
   "VPHG/In-house_testing/6414B-13-03.txt", \
   "VPHG/In-house_testing/6414B-01-03.txt", \
   "VPHG/In-house_testing/6414B-09-01.txt", \
   "VPHG/In-house_testing/6414B-01-04.txt", \
   "VPHG/In-house_testing/6414B-09-02.txt", \
   #"VPHG/In-house_testing/6414B-03-02.txt", \ #Not bonded
   #"VPHG/In-house_testing/6414B-13-02.txt", \ #Not bonded
   "VPHG/In-house_testing/WasachTest.txt",
]
    
vph_green_table = [
   "VPHG/In-house_testing/6414G-10-01.txt", \
   "VPHG/In-house_testing/6414G-11-04.txt", \
   "VPHG/In-house_testing/6414G-06-03_QC.txt", \
   "VPHG/In-house_testing/6414G-11-01.txt", \
   #"VPHG/In-house_testing/6414G-11-05.txt", \ #Not bonded
   "VPHG/In-house_testing/6414G-07-02.txt", \
   "VPHG/In-house_testing/6414G-11-02.txt", \
   "VPHG/In-house_testing/6414G-09-02.txt", \
   "VPHG/In-house_testing/6414G-11-03.txt"
]
 
vph_red_table = [
   "VPHG/In-house_testing/6414R-05-03.txt", \
   "VPHG/In-house_testing/6414R-06-04.txt", \
   #"VPHG/In-house_testing/6414R-06-01.txt", \ #Not bonded
   "VPHG/In-house_testing/6414R-07-01.txt", \
   "VPHG/In-house_testing/6414R-03-03.txt", \
   "VPHG/In-house_testing/6414R-06-02.txt", \
   "VPHG/In-house_testing/6414R-07-02_QC.txt", \
   "VPHG/In-house_testing/6414R-04-01.txt", \
   "VPHG/In-house_testing/6414R-06-03.txt"
]

#name qefile readnoise darkcurrent pixelsize
sensor_blue_table = [
   "CCD42-40_BLUE CCD42-40_dd.txt 2.6 0.001 13.5", #requirements spec
   "CCD42-40_BLUE CCD42-40_dd.txt 2.40 0.00297 13.5", #SN20003 -90 dither
   "CCD42-40_BLUE CCD42-40_dd.txt 2.31 0.000865 13.5" #SN20004 -90 dither
]

sensor_green_table = [
   "CCD42-40_GREEN CCD42-40_dd.txt 2.5 0.001 13.5", #requirements spec
   "CCD42-40_BLUE CCD42-40_dd.txt 2.38 0.00144 13.5" #SN20005 -90 dither
]

sensor_red_table = [
   "CCD42-40_RED CCD42-40_dd.txt 3.0 0.001 13.5", #requirements spec
   "CCD42-40_RED CCD42-40_dd.txt 2.29 0.00192 13.5" #SN20001 -90 nodither
]

def_list = [
   [ #spectrograph 1
      "llamas_red1.def",
      "llamas_green1.def",
      "llamas_blue1.def"
   ],
   [ #spectrograph 2
      "llamas_red2.def",
      "llamas_green2.def",
      "llamas_blue2.def"
   ],
   [ #spectrograph 3
      "llamas_red3.def",
      "llamas_green3.def",
      "llamas_blue3.def"
   ],
   [ #spectrograph 4
      "llamas_red4.def",
      "llamas_green4.def",
      "llamas_blue4.def"
   ],
   [ #spectrograph 5
      "llamas_red5.def",
      "llamas_green5.def",
      "llamas_blue5.def"
   ],
   [ #spectrograph 6
      "llamas_red6.def",
      "llamas_green6.def",
      "llamas_blue6.def"
   ],
   [ #spectrograph 7
      "llamas_red7.def",
      "llamas_green7.def",
      "llamas_blue7.def"
   ],
   [ #spectrograph 8
      "llamas_red8.def",
      "llamas_green8.def",
      "llamas_blue8.def"
   ]
]

base_list = ['llamas_red.def','llamas_green.def','llamas_blue.def']

def generate_random_spectrograph_defs():
    list_vph = [[],[],[]]
    list_vph[0] = random.sample(vph_red_table, 8)
    list_vph[1] = random.sample(vph_green_table, 8)
    list_vph[2] = random.sample(vph_blue_table, 8)
    collimator = collimator_table[0]
    dichroic_bg = ["", dichroic_bg_table[1], dichroic_bg_table[2]]
    dichroic_sl = [dichroic_sl_table[1], dichroic_sl_table[3], dichroic_sl_table[3]]
    ccd = [sensor_red_table[0], sensor_green_table[0], sensor_blue_table[0]]

    for idx,spectrograph in enumerate(def_list):
        for idc,camera in enumerate(spectrograph):
            with open(base_list[idc],'r') as readfile:
                with open(camera,'w',newline='') as writefile:
                    writefile.write("# This file generated by components.py")
                    for row in readfile:
                        if row[0:7] == "GRATING":
                            writefile.write('GRATING\t\tVPH_B  1200 420 0 '+list_vph[idc][idx]+' Wasach asbuilt\n')
                        elif row[0:6] == "SENSOR":
                            writefile.write('SENSOR\t\t'+ccd[idc]+'\n')
                        elif row[0:7] == "ELEMENT":
                            if "DichroicRG" in row:
                                writefile.write('ELEMENT\t\tDichroicRG 1 FusedSilica '+dichroic_sl[idc]+'\n')
                            elif "DichroicBG" in row:
                                writefile.write('ELEMENT\t\tDichroicBG 1 FusedSilica '+dichroic_bg[idc]+'\n')
                            elif "Collimator" in row:
                                writefile.write('ELEMENT \tCollimator 1 FusedSilica '+collimator+'\n')
                            else:
                                writefile.write(row)
                        else:
                            writefile.write(row)
    return 0

#change this to have args i can take in as strings, and also to expect just filenames
def generate_model_spectrograph_defs(index, dichroic_sl_transmission, dichroic_sl_reflection, dichroic_bg_transmission, dichroic_bg_reflection, vph_red, vph_green, vph_blue, ccd_red, ccd_green, ccd_blue, collimator):
    list_vph = [vph_red, vph_green, vph_blue]
    collimator = collimator + " ECI2 model"
    dichroic_bg = ["", dichroic_bg_transmission+" ECI2 asbuilt", dichroic_bg_reflection+" ECI2 asbuilt"] #0 transmission 1 reflection
    dichroic_sl = [dichroic_sl_transmission+" ECI2 asbuilt", dichroic_sl_reflection+" ECI2 asbuilt", dichroic_sl_reflection+" ECI2 asbuilt"] #0 transmission 1 reflection 
    ccd = [ccd_red, ccd_green, ccd_blue]
    def_files = ["llamas_red"+str(index)+".def", "llamas_green"+str(index)+".def", "llamas_blue"+str(index)+".def"]

    for idc,camera in enumerate(def_files):
        with open(base_list[idc],'r') as readfile:
            with open(camera,'w',newline='') as writefile:
                writefile.write("# This file generated by components.generate_model_spectrograph_defs")
                for row in readfile:
                    if row[0:7] == "GRATING":
                        writefile.write('GRATING\t\tVPH_B  1200 420 0 '+list_vph[idc]+' Wasach asbuilt\n')
                    elif row[0:6] == "SENSOR":
                        writefile.write('SENSOR\t\t'+ccd[idc]+'\n')
                    elif row[0:7] == "ELEMENT":
                        if "DichroicRG" in row:
                            writefile.write('ELEMENT\t\tDichroicRG 1 FusedSilica '+dichroic_sl[idc]+'\n')
                        elif "DichroicBG" in row:
                            writefile.write('ELEMENT\t\tDichroicBG 1 FusedSilica '+dichroic_bg[idc]+'\n')
                        elif "Collimator" in row:
                            writefile.write('ELEMENT \tCollimator 1 FusedSilica '+collimator+'\n')
                        else:
                            writefile.write(row)
                    else:
                        writefile.write(row)
    return 0

    
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('pass_args', nargs='*', default='')
    args = parser.parse_args()
    print(args.pass_args)

    if args.pass_args == '':
        generate_random_spectrograph_defs()
    else:
        print("Running model-based spectrograph def generation...")
        generate_model_spectrograph_defs(*args.pass_args)
        
    print("done")