function mat=mat1(mid,E,nu,rho,alpha,Tref,mat)
%  MAT1 mat=mat1(mid,E,nu,rho,alpha,Tref,mat)
%
%  add the new material properties for linear, temperature-independent 
%  isotropic materials to the material property matrix.  It looks for
%  empty rows in the mat matrix by looking for the first zero in the 
%  mid column.  If mat does not have any empty rows, then the new 
%  material properties are just appended.
%
%  If the property values are not in the "correct" range, a warning
%  is issued, and the routine continues operating.
%
%  mid numbers must be unique across all mat cards.
%
%  mid is a vector of material identification numbers. 
%  E is a vector of Young's moduli.
%  nu is a vector of Poisson's ratios.
%  rho is a vector of mass densities.
%  alpha is a vector of thermal expansion coefficients.
%  Tref is a vector of reference temperatures.
%  mat is the materials matrix.
%  
%  Tref and alpha are ignored if the mid is referenced by PCOMP.
%
%  The mat array generated by a reference to mat1 is stored as follows:
%  [mid 1 E G nu rho alpha Tref]
%

% Copyright 1992.  National Aeronautics and Space Administration,
% all rights reserved.
% Copyright 1993-2000.  California Institute of Technology, National
% Aeronautics and Space Administration.  All rights reserved.  US Government
% Sponsorship acknowledged.
% 
% THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
% INCLUDING BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY
% AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
% CALTECH BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
% ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
% WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTUOUS
% ACTION, ARISING OUT OF OR IN CONNECTION WITH THE ACCESS, USE OF
% PERFORMANCE OF THIS SOFTWARE.

%  27Dec95  lneedels:  created
%   3Jan96  lneedels:  removed G as an input, it is now calculated
%   3Jan96  lneedels:  modified mid so that it is guaranteed to be
%			 unique (midp=10*mid+1) for mat1
%  24Jan96  lneedels:  removed the "midp=10*mid+i
%  24Jan96  lneedels:  added the "mat type" column to the mat matrix.
%  24Jan96  lneedels:  added check to make sure mid's are unique.
%  28Jan97  lneedels:  modified for compiled version
%  17Dec97  lneedels:  changed max(size( to length for matlab5
%  03Mar98  lneedels:  added description of location of variables in mat array
%  15May98  lneedels:  changed "disp" to "warning" where appropriate
%  21Oct98  lneedels:  added Tref
%  01Mar99  rnorton:  fixed typo in description of Poisson ratios
%

%   1   2   3  4   5  6    7    8
%  mid 1.0  E  G  nu rho alpha Tref

if nargin ~= 7,
  warning('MAT1 has 7 input arguments')
  if nargin==6,    % make backward compatable
    mat=Tref;
    Tref=zeros(length(mid),1);
  else,
    error('MAT1 has 7 input arguments');
  end
end

%  check to make sure properties have values in "correct" range

%  mid > 0
if min(mid) < 0 
  warning('mid should be positive')
end

%  E > 0.0
if min(E) < 0.0 
  warning('Young''s modulus should be > 0.0')
end

%  -1.0 < nu < 0.5
if (min(nu) < -1.0) | (max(nu) > 0.5)
  warning(' -1.0 <  Poisson''s ratio < 0.5')
end

%  check to make sure that everything passed in is the same size
%  and oriented properly

if length(mid) ~= length(E)
  error('mid vector must be the same size as the E vector')
end
if length(mid) ~= length(nu)
  error('mid vector must be the same size as nu vector')
end
if length(mid) ~= length(rho)
  error('mid vector must be the same size as the rho vector')
end
if length(mid) ~= length(alpha)
  error('mid vector must be the same size as the alpha vector')
end
if length(mid) ~= length(Tref)
  error('mid vector must be the same size as the Tref vector')
end

[mmid,nmid]=size(mid);
[mE,nE]=size(E);
[mnu,nnu]=size(nu);
[mrho,nrho]=size(rho);
[malpha,nalpha]=size(alpha);
[mTref,nTref]=size(Tref);

if (nmid ~= 1) & (mmid ~= 1)
  error('mid must be a vector')
end
if (nE ~= 1) & (mE ~= 1)
  error('E must be a vector')
end
if (nnu ~= 1) & (mnu ~= 1)
  error('nu must be a vector')
end
if (nrho ~= 1) & (mrho ~= 1)
  error('rho must be a vector')
end
if (nalpha ~= 1) & (malpha ~= 1)
  error('alpha must be a vector')
end
if (nTref ~= 1) & (mTref ~= 1)
  error('Tref must be a vector')
end

if nmid>mmid
  mid=mid';
end
if nE>mE
  E=E';
end
if nnu>mnu
  nu=nu';
end
if nrho>mrho
  rho=rho';
end
if nalpha>malpha
  alpha=alpha';
end
if nTref>mTref
  Tref=Tref';
end

mat=mat1mex(mid,E,nu,rho,alpha,Tref,mat);
